from collections import defaultdict

class Solution:
    def coinChange(self, coins, amount):
        coins.sort(reverse=True)
        __memory = defaultdict(dict)
        return self.__lookUpMemory(coins, 0, amount, __memory)
    
    def __lookUpMemory(self, coins, idx, amount, __memory):
        if amount == 0:
            return 0
        if idx in __memory and amount in __memory[idx]:
            return __memory[idx][amount]
        
        if idx +1 == len(coins):
            if amount % coins[idx] == 0:
                __memory[idx][amount] = amount // coins[idx]
                return __memory[idx][amount]
            else:
                __memory[idx][amount] = -1
                return -1
        
        if amount >= coins[idx]:
            ans = self.__lookUpMemory(coins, idx, amount-coins[idx], __memory)
            if ans != -1:
                with_cur = ans + 1
            else:
                with_cur = -1
        else:
            with_cur = -1
        without_cur = self.__lookUpMemory(coins, idx+1, amount, __memory)
        
        if with_cur == -1:
            __memory[idx][amount] = without_cur
        elif without_cur == -1:
            __memory[idx][amount] = with_cur
        else:
            __memory[idx][amount] = min(with_cur, without_cur)
        return __memory[idx][amount]
        
if __name__ == '__main__':
    solution = Solution()
    coins = [1,2,5]
    amount = 11
    print(solution.coinChange(coins, amount))

