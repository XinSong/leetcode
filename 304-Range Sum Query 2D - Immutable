class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        m = len(matrix)
        n = len(matrix[0])
        row_cumsum = [0] * n
        self.submatrix_cumsum = []
        for row  in matrix:
            row_cumsum = [ row[idx]+row_cumsum[idx] for idx in range(n)]
            total_sum = 0
            _row_cumsum_cumsum = []
            for _cumsum in row_cumsum:
                total_sum += _cumsum
                _row_cumsum_cumsum.append(total_sum)
            self.submatrix_cumsum.append(_row_cumsum_cumsum)
                
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        if row1 == 0:
            if col1 == 0:
                return self.submatrix_cumsum[row2][col2]
            else:
                return self.submatrix_cumsum[row2][col2] - self.submatrix_cumsum[row2][col1-1]
        else:
            if col1 == 0:
                return self.submatrix_cumsum[row2][col2] - self.submatrix_cumsum[row1-1][col2]
            else:
                return self.submatrix_cumsum[row2][col2] - self.submatrix_cumsum[row1-1][col2] - self.submatrix_cumsum[row2][col1-1] + self.submatrix_cumsum[row1-1][col1-1]
            