The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.

Solution:
/**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
*/

#include <algorithm>
#include <map>
 
class Solution {
public:
    int rob(TreeNode* root) {
        if(root == NULL)
            return 0;
            
        int rob_root, rob_no_root;
        
        if(root_robbed_value.find(root) == root_robbed_value.end())
            root_robbed_value[root] = root->val + rob_empty_root(root->left) + rob_empty_root(root->right);
            
        if(root_not_robbed_value.find(root) == root_not_robbed_value.end())
            root_not_robbed_value[root] = rob(root->left) + rob(root->right);

        return max(root_robbed_value[root], root_not_robbed_value[root]);
    }
    
    int rob_empty_root(TreeNode * root){
        if(root == NULL)
            return 0;
            
        if(root_not_robbed_value.find(root) == root_not_robbed_value.end())
            root_not_robbed_value[root] = rob(root->left) + rob(root->right);
        return root_not_robbed_value[root];
    }
private:
    map<TreeNode *, int> root_robbed_value;
    map<TreeNode *, int> root_not_robbed_value;
};
