from collections import defaultdict
class Solution:
    def canPartition(self, nums) :
        __memory = defaultdict(dict)
        
        num_sum = sum(nums)
        
        if num_sum % 2 != 0:
            return False
        
        if self.__canPartition(nums, 0, num_sum//2, __memory):
            return True
        else:
            return False
        
    def __canPartition(self, nums, idx, num_sum, __memory):
        if num_sum == 0:
            return True
        if idx >= len(nums):
            return False
        if idx in __memory and num_sum in __memory[idx]:
            return __memory[idx][num_sum]
        
        if num_sum >= nums[idx] and self.__canPartition(nums, idx+1, num_sum - nums[idx], __memory):
            __memory[idx][num_sum] = True
            return True                
        if self.__canPartition(nums, idx+1, num_sum, __memory):
            __memory[idx][num_sum] = True
            return True
        __memory[idx][num_sum] = False
        return False

if __name__ == '__main__':
    solution = Solution()
    nums = [1,5,11,3]
    print(solution.canPartition(nums))