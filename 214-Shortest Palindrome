class Solution:
    def shortestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        s_s = '#'.join([s, s[::-1]])
        lps = self.computeLPS(s_s)
        length = len(s)

        return s[len(s)-1:lps[len(s_s)-1]:-1] + s 
        
    def computeLPS(self, s):
        length = len(s)
        pi = [-1] * length
        k = -1
        for idx in range(1, length):
            while k>=0 and s[idx] != s[k+1]:
                k = pi[k]
            if s[idx] == s[k+1]:
                k = k+1
            pi[idx] = k
        return pi

if __name__ == '__main__':
    solution = Solution()
    print(solution.shortestPalindrome("abcd"))

'''
class Solution:
    def shortestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        length = len(s)
        right_border = length - 1
        
        while right_border >= 0:
            left_idx = 0
            for right_idx in range(right_border, -1, -1):
                if s[left_idx] == s[right_idx]:
                    left_idx += 1
            if left_idx == right_border + 1:
                return s[:left_idx-1:-1] + s
            else:
                right_border = left_idx - 1

class Solution:
    def shortestPalindrome(self, s: str) -> str:
        length = len(s)
        max_idx = 0
        for center_idx in range(0, length):
            left_idx, right_idx = center_idx -1, center_idx + 1
            while left_idx >=0 and right_idx < length and s[left_idx] == s[right_idx]:
                left_idx -= 1
                right_idx += 1
            left_idx += 1
            right_idx -= 1
            if left_idx == 0 and max_idx < right_idx:
                max_idx = right_idx
            left_idx, right_idx = center_idx, center_idx + 1
            while left_idx >=0 and right_idx < length and s[left_idx] == s[right_idx]:
                left_idx -= 1
                right_idx += 1
            left_idx += 1
            right_idx -= 1
            if left_idx == 0 and max_idx  < right_idx:
                max_idx = right_idx
        return s[:max_idx:-1]+s       
'''