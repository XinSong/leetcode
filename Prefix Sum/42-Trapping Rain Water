"""
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

Solution 1:
class Solution:
    def trap(self, height):
        stack = []
        res = 0
        
        for _idx, _height in enumerate(height):
            if not stack:
                stack.append((_idx, _height))
            else:
                if _height <= stack[-1][1]:
                    stack.append((_idx, _height))
                else:
                    while stack and _height > stack[-1][1]:
                        top = stack.pop()
                        if stack:                        
                            rain_height = min(_height, stack[-1][1]) - top[1]
                            res += rain_height * (_idx - stack[-1][0] -1)
                    stack.append((_idx, _height))            
        return res
"""
class Solution:
    def trap(self, height):
        size = len(height)
        left_max, right_max = [0]*size, [0]*size

        left_max[0] = height[0]
        for idx in range(1, size):
            left_max[idx] = max(left_max[idx-1], height[idx])
        
        right_max[size - 1] = height[-1]
        for idx in range(size-2, -1, -1):
            right_max[idx] = max(right_max[idx+1], height[idx])

        total_rain = 0
        for idx in range(1, size-1):
            total_rain += min(left_max[idx], right_max[idx]) - height[idx]
        return total_rain

if __name__ == '__main__':
    solution = Solution()
    print(solution.trap([0,1,0,2,1,0,1,3,2,1,2,1]))