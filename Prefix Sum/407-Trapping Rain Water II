"""
Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

Example 1:
Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small pounds 1 and 3 units trapped.
The total volume of water trapped is 4.

Example 2:
Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10
 
Constraints:
m == heightMap.length
n == heightMap[i].length
1 <= m, n <= 200
0 <= heightMap[i][j] <= 2 * 104
"""
class Solution:
    def trapRainWater(self, heightMap):
        row_size, column_size = len(heightMap), len(heightMap[0])
        left_max = []
        
        for i in range(row_size):
            row_left_max = []
            for j in range(column_size):
                if i == 0:
                    x_max = heightMap[0][j]
                else:
                    x_max = max(left_max[-1][j][0], heightMap[i][j])
                    
                if j == 0:
                    y_max = heightMap[i][0]
                else:
                    y_max = max(row_left_max[-1][1], heightMap[i][j])
                row_left_max.append((x_max, y_max))
            left_max.append(row_left_max)
        
        right_max = []
        for i in range(row_size-1, -1, -1):
            row_right_max = []
            for j in range(column_size-1, -1, -1):
                if i == row_size - 1:
                    x_max = heightMap[row_size-1][j]
                else:
                    x_max = max(right_max[-1][j][0], heightMap[i][j])
                    
                if j == column_size - 1:
                    y_max = heightMap[i][column_size-1]
                else:
                    y_max = max(row_right_max[-1][1], heightMap[i][j])
                row_right_max.append((x_max, y_max))
            row_right_max.reverse()
            right_max.append(row_right_max)
        right_max.reverse()
        
        total_rain = 0
        for i in range(row_size):
            for j in range(column_size):
                total_rain += min(left_max[i][j][0], left_max[i][j][1], right_max[i][j][0], right_max[i][j][1]) - heightMap[i][j]
        return total_rain

if __name__ == '__main__':
    solution = Solution()
    print(solution.trapRainWater([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]))
    print(solution.trapRainWater([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]))