"""
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

Solution 1:
from queue import Queue
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        if k == 0:
            return self.__longestConsecutiveOnes(nums)
        
        q = Queue(k)
        max_cnt = 0
        cnt = 0
        for idx, num in enumerate(nums):
            if num == 1:
                cnt += 1
            elif not q.full():
                q.put(idx)
                cnt += 1
            else:
                max_cnt = max(max_cnt, cnt)
                left_idx = q.get()
                cnt = idx - left_idx
                q.put(idx)
        max_cnt = max(max_cnt, cnt)
        return max_cnt
    
    def __longestConsecutiveOnes(self, nums):
        max_cnt = 0
        cnt = 0
        for num in nums:
            if num == 1:
                cnt += 1
            else:
                max_cnt = max(max_cnt, cnt)
                cnt = 0
        max_cnt = max(max_cnt, cnt)
        return max_cnt
"""
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        w_left, w_right = 0, 0
        max_one_cnt, one_cnt, zero_cnt = 0, 0, 0
        while w_right < len(nums):
            if nums[w_right] == 1:
                one_cnt += 1
                w_right += 1
            elif zero_cnt < k:
                zero_cnt += 1
                one_cnt += 1
                w_right += 1
            else:
                max_one_cnt = max(one_cnt, max_one_cnt)
                if nums[w_left] == 1:
                    one_cnt -= 1
                else:
                    one_cnt -= 1
                    zero_cnt -= 1
                w_left += 1
        max_one_cnt = max(one_cnt, max_one_cnt)
        return max_one_cnt
