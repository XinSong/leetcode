class Solution:
    def longestPalindrome(self, s: str) -> str:
        start = 0
        end = len(s)
        state = [[None] * (len(s)+1) for _ in  range(len(s)+1)]
        return self.__longestPalindrome(s, start, end, state)
            
    def __longestPalindrome(self, s:str, start: int, end: int, state: list) -> str:
        if state[start][end] is not None:
            return state[start][end]
        elif self.isPalindrome(s[start:end]):
            state[start][end] = s[start:end]
            return s[start:end]
        else:
            p1 = self.__longestPalindrome(s, start+1, end, state)
            p2 = self.__longestPalindrome(s, start, end-1, state)
            if len(p1) > len(p2):
                state[start][end] = p1
                return p1
            else:
                state[start][end] = p2
                return p2
    
    def isPalindrome(self, s:str) -> bool:        
        length = len(s) 
        for idx in range(length // 2):
            if s[idx] != s[length - idx -1]:
                return False
        return True

if __name__ == '__main__':
    solution = Solution()
    print(solution.longestPalindrome('babad'))
    print(solution.longestPalindrome('cbbd'))
    print(solution.longestPalindrome('a'))
    print(solution.longestPalindrome('aca'))




