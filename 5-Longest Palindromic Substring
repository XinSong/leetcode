class Solution:
    def longestPalindrome(self, s: str) -> str:
        length = len(s)
        longest_str = s[0]
        for center_idx in range(0, length):
            left_idx, right_idx = center_idx -1, center_idx + 1
            while left_idx >=0 and right_idx < length and s[left_idx] == s[right_idx]:
                left_idx -= 1
                right_idx += 1
            left_idx += 1
            right_idx -= 1
            if len(longest_str) < right_idx - left_idx + 1:
                longest_str = s[left_idx:right_idx+1]
            left_idx, right_idx = center_idx, center_idx + 1
            while left_idx >=0 and right_idx < length and s[left_idx] == s[right_idx]:
                left_idx -= 1
                right_idx += 1
            left_idx += 1
            right_idx -= 1
            if len(longest_str) < right_idx - left_idx + 1:
                longest_str = s[left_idx:right_idx+1]
        return longest_str        

"""
class Solution:
    def longestPalindrome(self, s: str) -> str:
        length = len(s)
        longest_str = s[0]
        dp = [[False] * length for _ in range(length)]
        for _idx_diff in range(0, length):
            for start_idx in range(0, length-_idx_diff):
                if _idx_diff == 0:
                    dp[start_idx][start_idx] = True
                elif _idx_diff == 1:
                    if s[start_idx] == s[start_idx+1]:
                        dp[start_idx][start_idx+1] = True
                        if len(longest_str) < _idx_diff + 1:
                            longest_str = s[start_idx:start_idx+2]
                else:
                    if s[start_idx] == s[start_idx + _idx_diff]:
                        dp[start_idx][start_idx + _idx_diff] = dp[start_idx+1][start_idx + _idx_diff-1]
                        if dp[start_idx][start_idx + _idx_diff] and len(longest_str) < _idx_diff+1:
                            longest_str = s[start_idx:start_idx+_idx_diff+1]
        return longest_str
"""
