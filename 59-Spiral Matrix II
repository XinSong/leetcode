"""
Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

Example 1:
Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:
Input: n = 1
Output: [[1]]
 
Constraints:
1 <= n <= 20
"""
import numpy as np

class Solution:
    def generateMatrix(self, n):
        def spiral_path(start_x, start_y, end_x, end_y):
            for y in range(start_y, end_y):
                yield start_x, y

            for x in range(start_x, end_x+1):
                yield x, end_y
            
            for y in range(end_y-1, start_y, -1):
                yield end_x, y
            
            for x in range(end_x, start_x, -1):
                yield x, start_y
        
        matrix = np.empty((n,n), dtype=np.int16)
        cnt = 1
        start_x, start_y = 0, 0
        end_x, end_y = n-1, n-1
        while cnt < n*n +1:
            for x, y in spiral_path(start_x, start_y, end_x, end_y):
                matrix[x][y] = cnt
                cnt += 1
            start_x += 1
            start_y += 1
            end_x -= 1
            end_y -= 1
        return matrix
                
if __name__ == '__main__':
    solution = Solution()
    print(solution.generateMatrix(3))