from collections import defaultdict
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        __memory = defaultdict(dict)
        return self.__lookUpMemory(coins, 0, amount, __memory)
    
    def __lookUpMemory(self, coins, idx, amount, __memory):
        if amount == 0:
            return 1
        if idx in __memory and amount in __memory[idx]:
            return __memory[idx][amount]
        
        if idx + 1 == len(coins):
            if amount % coins[idx] == 0:
                __memory[idx][amount] = 1
                return __memory[idx][amount]
            else:
                __memory[idx][amount] = 0
                return 0
        
        if amount >= coins[idx]:
            with_cur = self.__lookUpMemory(coins, idx, amount-coins[idx], __memory)
        else:
            with_cur = 0
        without_cur = self.__lookUpMemory(coins, idx+1, amount, __memory)
        
        __memory[idx][amount] = with_cur + without_cur
        return __memory[idx][amount]
if __name__ == '__main__':
    solution = Solution()
    amount = 5
    coins = [1,2,5]       
    print(solution.change(amount, coins))        
                
                
                