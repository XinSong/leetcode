from functools import lru_cache
class Solution:
    @lru_cache(maxsize=1024)
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        return self.climbStairs(n-1) + self.climbStairs(n-2)

"""
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        res = [0] * (n+1)
        res[1] = 1
        res[2] = 2
        for idx in range(3, n+1):
            res[idx] = res[idx-1] + res[idx-2]
        return res[n]
        
class Solution:
    def climbStairs(self, n: int) -> int:
        memory = dict()
        return self.__climbStairs(n, memory)
    
    def __climbStairs(self, n, memory):
        if n <= 2:
            return n
        if n in memory:
            return memory[n]
        else:
            memory[n] = self.__climbStairs(n-1, memory) + self.__climbStairs(n-2, memory)
            return memory[n]
"""