class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        lps = self.computeLPS(s)
        length = len(s)
        if lps[length-1] != -1 and s[lps[length-1]+1:length]*(length // (length - lps[length-1] -1)) == s:
            return True
        return False
        
    def computeLPS(self, s):
        k=-1
        pi = [-1] * len(s)
        for idx in range(1, len(s)):
            while k>=0 and s[idx] != s[k+1]:
                k = pi[k]
            if s[idx] == s[k+1]:
                k += 1
            pi[idx] = k
        return pi

if __name__ == '__main__':
    solution = Solution()
    print(solution.repeatedSubstringPattern("abcabcabcabc"))