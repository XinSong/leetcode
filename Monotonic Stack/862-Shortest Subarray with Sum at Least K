"""
Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [1], k = 1
Output: 1

Example 2:
Input: nums = [1,2], k = 4
Output: -1

Example 3:
Input: nums = [2,-1,2], k = 3
Output: 3
 
Constraints:
1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= k <= 109
"""

from collections import deque
class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        prefix_sums = [0]
        for num in nums:
            prefix_sums.append(prefix_sums[-1] + num)
        
        q = deque()
        shortest = float('inf')
        for _idx, _prefix_sum in enumerate(prefix_sums):
            if not q:
                q.append(_idx)
            else:
                while q and _prefix_sum - prefix_sums[q[0]] >= k:
                    shortest = min(shortest, _idx - q[0])
                    q.popleft()                
                while q and _prefix_sum < prefix_sums[q[-1]]:
                    q.pop()
                q.append(_idx)
        if shortest == float('inf'):
            shortest = -1
        return shortest