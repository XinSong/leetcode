class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        
        left_1 = 0
        right_1 = len(nums1)
        half = (len(nums1) + len(nums2)) // 2
        while left_1 < right_1:
            mid_1 = (left_1 + right_1) // 2
            mid_2 = half - mid_1 - 2
            
            nums1_left = nums1[mid_1]
            nums1_right = nums1[mid_1 + 1] if mid_1 + 1 < len(nums1) else float('inf')
            nums2_left = nums2[mid_2] if mid_2 >= 0 else float('-inf')
            nums2_right = nums2[mid_2+1] if mid_2 + 1 < len(nums2) else float('inf')
            
            if (nums1_left <= nums2_right) and (nums2_left <= nums1_right):
                if (len(nums1) + len(nums2)) % 2 == 0:
                    return (max(nums1_left, nums2_left) + min(nums1_right, nums2_right)) / 2
                else:
                    return min(nums1_right, nums2_right)
            else:
                if nums1[mid_1] > nums2[mid_2+1]:
                    right_1 = mid_1
                else:
                    left_1 = mid_1 + 1

if __name__ == '__main__':
    solution = Solution()
    nums1 = [2]
    nums2 = [1,3]
    solution.findMedianSortedArrays(nums1, nums2)